services:
  spring-boot:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: spring-boot
    ports:
      - "8080:8080"
    volumes:
      - ./dist:/app/dist
      - ~/.m2:/root/.m2 # cache maven local
    environment:
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PWD: ${SPRING_DATASOURCE_PWD}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - appnet

  db:
    image: postgres:17-alpine
    container_name: postgres-db
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PWD}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./etc/db:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - appnet

volumes:
  pgdata:

networks:
  appnet:
    driver: bridge
